/* tslint:disable */
/* eslint-disable */
/**
 * Plane API
 * API documentation for my specific app
 *
 * The version of the OpenAPI document: 1.0.0 (1.0.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupEnum } from './GroupEnum';
import {
    GroupEnumFromJSON,
    GroupEnumFromJSONTyped,
    GroupEnumToJSON,
    GroupEnumToJSONTyped,
} from './GroupEnum';

/**
 * 
 * @export
 * @interface State
 */
export interface State {
    /**
     * 
     * @type {string}
     * @memberof State
     */
    color: string;
    /**
     * 
     * @type {Date}
     * @memberof State
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    readonly createdBy: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof State
     */
    _default?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof State
     */
    readonly deletedAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    externalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    externalSource?: string | null;
    /**
     * 
     * @type {GroupEnum}
     * @memberof State
     */
    group?: GroupEnum;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    readonly id: string;
    /**
     * 
     * @type {boolean}
     * @memberof State
     */
    isTriage?: boolean;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    readonly project: string;
    /**
     * 
     * @type {number}
     * @memberof State
     */
    sequence?: number;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    slug?: string;
    /**
     * 
     * @type {Date}
     * @memberof State
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    readonly updatedBy: string | null;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    readonly workspace: string;
}



/**
 * Check if a given object implements the State interface.
 */
export function instanceOfState(value: object): value is State {
    if (!('color' in value) || value['color'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('project' in value) || value['project'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('workspace' in value) || value['workspace'] === undefined) return false;
    return true;
}

export function StateFromJSON(json: any): State {
    return StateFromJSONTyped(json, false);
}

export function StateFromJSONTyped(json: any, ignoreDiscriminator: boolean): State {
    if (json == null) {
        return json;
    }
    return {
        
        'color': json['color'],
        'createdAt': (new Date(json['created_at'])),
        'createdBy': json['created_by'],
        '_default': json['default'] == null ? undefined : json['default'],
        'deletedAt': (json['deleted_at'] == null ? null : new Date(json['deleted_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'externalSource': json['external_source'] == null ? undefined : json['external_source'],
        'group': json['group'] == null ? undefined : GroupEnumFromJSON(json['group']),
        'id': json['id'],
        'isTriage': json['is_triage'] == null ? undefined : json['is_triage'],
        'name': json['name'],
        'project': json['project'],
        'sequence': json['sequence'] == null ? undefined : json['sequence'],
        'slug': json['slug'] == null ? undefined : json['slug'],
        'updatedAt': (new Date(json['updated_at'])),
        'updatedBy': json['updated_by'],
        'workspace': json['workspace'],
    };
}

export function StateToJSON(json: any): State {
    return StateToJSONTyped(json, false);
}

export function StateToJSONTyped(value?: Omit<State, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'color': value['color'],
        'default': value['_default'],
        'description': value['description'],
        'external_id': value['externalId'],
        'external_source': value['externalSource'],
        'group': GroupEnumToJSON(value['group']),
        'is_triage': value['isTriage'],
        'name': value['name'],
        'sequence': value['sequence'],
        'slug': value['slug'],
    };
}

