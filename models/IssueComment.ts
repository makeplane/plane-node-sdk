/* tslint:disable */
/* eslint-disable */
/**
 * Plane API
 * API documentation for my specific app
 *
 * The version of the OpenAPI document: 1.0.0 (1.0.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccessEnum } from './AccessEnum';
import {
    AccessEnumFromJSON,
    AccessEnumFromJSONTyped,
    AccessEnumToJSON,
    AccessEnumToJSONTyped,
} from './AccessEnum';

/**
 * 
 * @export
 * @interface IssueComment
 */
export interface IssueComment {
    /**
     * 
     * @type {AccessEnum}
     * @memberof IssueComment
     */
    access?: AccessEnum;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    actor?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof IssueComment
     */
    attachments?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    commentHtml?: string;
    /**
     * 
     * @type {Date}
     * @memberof IssueComment
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    readonly createdBy: string | null;
    /**
     * 
     * @type {Date}
     * @memberof IssueComment
     */
    deletedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    externalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    externalSource?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    readonly id: string;
    /**
     * 
     * @type {boolean}
     * @memberof IssueComment
     */
    readonly isMember: boolean;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    readonly issue: string;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    readonly project: string;
    /**
     * 
     * @type {Date}
     * @memberof IssueComment
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    readonly updatedBy: string | null;
    /**
     * 
     * @type {string}
     * @memberof IssueComment
     */
    readonly workspace: string;
}



/**
 * Check if a given object implements the IssueComment interface.
 */
export function instanceOfIssueComment(value: object): value is IssueComment {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isMember' in value) || value['isMember'] === undefined) return false;
    if (!('issue' in value) || value['issue'] === undefined) return false;
    if (!('project' in value) || value['project'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('workspace' in value) || value['workspace'] === undefined) return false;
    return true;
}

export function IssueCommentFromJSON(json: any): IssueComment {
    return IssueCommentFromJSONTyped(json, false);
}

export function IssueCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueComment {
    if (json == null) {
        return json;
    }
    return {
        
        'access': json['access'] == null ? undefined : AccessEnumFromJSON(json['access']),
        'actor': json['actor'] == null ? undefined : json['actor'],
        'attachments': json['attachments'] == null ? undefined : json['attachments'],
        'commentHtml': json['comment_html'] == null ? undefined : json['comment_html'],
        'createdAt': (new Date(json['created_at'])),
        'createdBy': json['created_by'],
        'deletedAt': json['deleted_at'] == null ? undefined : (new Date(json['deleted_at'])),
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'externalSource': json['external_source'] == null ? undefined : json['external_source'],
        'id': json['id'],
        'isMember': json['is_member'],
        'issue': json['issue'],
        'project': json['project'],
        'updatedAt': (new Date(json['updated_at'])),
        'updatedBy': json['updated_by'],
        'workspace': json['workspace'],
    };
}

export function IssueCommentToJSON(json: any): IssueComment {
    return IssueCommentToJSONTyped(json, false);
}

export function IssueCommentToJSONTyped(value?: Omit<IssueComment, 'created_at'|'created_by'|'id'|'is_member'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access': AccessEnumToJSON(value['access']),
        'actor': value['actor'],
        'attachments': value['attachments'],
        'comment_html': value['commentHtml'],
        'deleted_at': value['deletedAt'] == null ? undefined : ((value['deletedAt'] as any).toISOString()),
        'external_id': value['externalId'],
        'external_source': value['externalSource'],
    };
}

