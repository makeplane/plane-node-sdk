/* tslint:disable */
/* eslint-disable */
/**
 * Plane API
 * API documentation for my specific app
 *
 * The version of the OpenAPI document: 1.0.0 (1.0.0)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cycle,
  CycleIssue,
  InboxIssue,
  Issue,
  IssueAttachment,
  IssueAttachmentEntityType,
  IssueComment,
  IssueLink,
  IssuePropertyAPI,
  IssuePropertyOptionAPI,
  IssuePropertyValueAPI,
  IssueTypeAPI,
  Label,
  Module,
  ModuleIssue,
  PatchedCycle,
  PatchedInboxIssue,
  PatchedIssue,
  PatchedIssueComment,
  PatchedIssueLink,
  PatchedIssuePropertyAPI,
  PatchedIssuePropertyOptionAPI,
  PatchedIssueTypeAPI,
  PatchedLabel,
  PatchedModule,
  PatchedProject,
  PatchedState,
  Project,
  State,
} from '../models/index';
import {
    CycleFromJSON,
    CycleToJSON,
    CycleIssueFromJSON,
    CycleIssueToJSON,
    InboxIssueFromJSON,
    InboxIssueToJSON,
    IssueFromJSON,
    IssueToJSON,
    IssueAttachmentFromJSON,
    IssueAttachmentToJSON,
    IssueAttachmentEntityTypeFromJSON,
    IssueAttachmentEntityTypeToJSON,
    IssueCommentFromJSON,
    IssueCommentToJSON,
    IssueLinkFromJSON,
    IssueLinkToJSON,
    IssuePropertyAPIFromJSON,
    IssuePropertyAPIToJSON,
    IssuePropertyOptionAPIFromJSON,
    IssuePropertyOptionAPIToJSON,
    IssuePropertyValueAPIFromJSON,
    IssuePropertyValueAPIToJSON,
    IssueTypeAPIFromJSON,
    IssueTypeAPIToJSON,
    LabelFromJSON,
    LabelToJSON,
    ModuleFromJSON,
    ModuleToJSON,
    ModuleIssueFromJSON,
    ModuleIssueToJSON,
    PatchedCycleFromJSON,
    PatchedCycleToJSON,
    PatchedInboxIssueFromJSON,
    PatchedInboxIssueToJSON,
    PatchedIssueFromJSON,
    PatchedIssueToJSON,
    PatchedIssueCommentFromJSON,
    PatchedIssueCommentToJSON,
    PatchedIssueLinkFromJSON,
    PatchedIssueLinkToJSON,
    PatchedIssuePropertyAPIFromJSON,
    PatchedIssuePropertyAPIToJSON,
    PatchedIssuePropertyOptionAPIFromJSON,
    PatchedIssuePropertyOptionAPIToJSON,
    PatchedIssueTypeAPIFromJSON,
    PatchedIssueTypeAPIToJSON,
    PatchedLabelFromJSON,
    PatchedLabelToJSON,
    PatchedModuleFromJSON,
    PatchedModuleToJSON,
    PatchedProjectFromJSON,
    PatchedProjectToJSON,
    PatchedStateFromJSON,
    PatchedStateToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    StateFromJSON,
    StateToJSON,
} from '../models/index';

export interface WorkspacesIssuesRetrieveRequest {
    issueIdentifier: string;
    projectIdentifier: string;
    slug: string;
}

export interface WorkspacesProjectsArchiveCreateRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchiveDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchivedCyclesCreateRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchivedCyclesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchivedCyclesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchivedModulesCreateRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchivedModulesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsArchivedModulesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCreateRequest {
    slug: string;
    project: Omit<Project, 'cover_image_url'|'created_at'|'created_by'|'deleted_at'|'emoji'|'id'|'is_deployed'|'is_member'|'member_role'|'sort_order'|'total_cycles'|'total_members'|'total_modules'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsCreate2Request {
    id: string;
    slug: string;
    project: Omit<Project, 'cover_image_url'|'created_at'|'created_by'|'deleted_at'|'emoji'|'id'|'is_deployed'|'is_member'|'member_role'|'sort_order'|'total_cycles'|'total_members'|'total_modules'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsCyclesArchiveCreateRequest {
    cycleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesArchiveDestroyRequest {
    cycleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesArchiveRetrieveRequest {
    cycleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesCreateRequest {
    projectId: string;
    slug: string;
    cycle: Omit<Cycle, 'backlog_issues'|'cancelled_issues'|'completed_estimates'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'owned_by'|'project'|'started_estimates'|'started_issues'|'total_estimates'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsCyclesCreate2Request {
    id: string;
    projectId: string;
    slug: string;
    cycle: Omit<Cycle, 'backlog_issues'|'cancelled_issues'|'completed_estimates'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'owned_by'|'project'|'started_estimates'|'started_issues'|'total_estimates'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsCyclesCycleIssuesCreateRequest {
    cycleId: string;
    projectId: string;
    slug: string;
    cycleIssue: Omit<CycleIssue, 'created_at'|'cycle'|'id'|'project'|'sub_issues_count'|'updated_at'|'workspace'>;
}

export interface WorkspacesProjectsCyclesCycleIssuesCreate2Request {
    cycleId: string;
    issueId: string;
    projectId: string;
    slug: string;
    cycleIssue: Omit<CycleIssue, 'created_at'|'cycle'|'id'|'project'|'sub_issues_count'|'updated_at'|'workspace'>;
}

export interface WorkspacesProjectsCyclesCycleIssuesDestroyRequest {
    cycleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesCycleIssuesDestroy2Request {
    cycleId: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesCycleIssuesRetrieveRequest {
    cycleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesCycleIssuesRetrieve2Request {
    cycleId: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesDestroy2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedCycle?: Omit<PatchedCycle, 'backlog_issues'|'cancelled_issues'|'completed_estimates'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'owned_by'|'project'|'started_estimates'|'started_issues'|'total_estimates'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsCyclesPartialUpdate2Request {
    id: string;
    projectId: string;
    slug: string;
    patchedCycle?: Omit<PatchedCycle, 'backlog_issues'|'cancelled_issues'|'completed_estimates'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'owned_by'|'project'|'started_estimates'|'started_issues'|'total_estimates'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsCyclesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesRetrieve2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsCyclesTransferIssuesCreateRequest {
    cycleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsDestroyRequest {
    slug: string;
}

export interface WorkspacesProjectsDestroy2Request {
    id: string;
    slug: string;
}

export interface WorkspacesProjectsInboxIssuesCreateRequest {
    projectId: string;
    slug: string;
    inboxIssue: Omit<InboxIssue, 'created_at'|'created_by'|'id'|'issue'|'issue_detail'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsInboxIssuesCreate2Request {
    issueId: string;
    projectId: string;
    slug: string;
    inboxIssue: Omit<InboxIssue, 'created_at'|'created_by'|'id'|'issue'|'issue_detail'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsInboxIssuesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsInboxIssuesDestroy2Request {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsInboxIssuesPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedInboxIssue?: Omit<PatchedInboxIssue, 'created_at'|'created_by'|'id'|'issue'|'issue_detail'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsInboxIssuesPartialUpdate2Request {
    issueId: string;
    projectId: string;
    slug: string;
    patchedInboxIssue?: Omit<PatchedInboxIssue, 'created_at'|'created_by'|'id'|'issue'|'issue_detail'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsInboxIssuesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsInboxIssuesRetrieve2Request {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuePropertiesOptionsCreateRequest {
    projectId: string;
    propertyId: string;
    slug: string;
    issuePropertyOptionAPI: Omit<IssuePropertyOptionAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'logo_props'|'project'|'property'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuePropertiesOptionsCreate2Request {
    optionId: string;
    projectId: string;
    propertyId: string;
    slug: string;
    issuePropertyOptionAPI: Omit<IssuePropertyOptionAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'logo_props'|'project'|'property'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuePropertiesOptionsDestroyRequest {
    projectId: string;
    propertyId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuePropertiesOptionsDestroy2Request {
    optionId: string;
    projectId: string;
    propertyId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuePropertiesOptionsPartialUpdateRequest {
    projectId: string;
    propertyId: string;
    slug: string;
    patchedIssuePropertyOptionAPI?: Omit<PatchedIssuePropertyOptionAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'logo_props'|'project'|'property'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuePropertiesOptionsPartialUpdate2Request {
    optionId: string;
    projectId: string;
    propertyId: string;
    slug: string;
    patchedIssuePropertyOptionAPI?: Omit<PatchedIssuePropertyOptionAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'logo_props'|'project'|'property'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuePropertiesOptionsRetrieveRequest {
    projectId: string;
    propertyId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuePropertiesOptionsRetrieve2Request {
    optionId: string;
    projectId: string;
    propertyId: string;
    slug: string;
}

export interface WorkspacesProjectsIssueTypesCreateRequest {
    projectId: string;
    slug: string;
    issueTypeAPI: Omit<IssueTypeAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'is_default'|'level'|'logo_props'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesCreate2Request {
    projectId: string;
    slug: string;
    typeId: string;
    issueTypeAPI: Omit<IssueTypeAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'is_default'|'level'|'logo_props'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssueTypesDestroy2Request {
    projectId: string;
    slug: string;
    typeId: string;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesCreateRequest {
    projectId: string;
    slug: string;
    typeId: string;
    issuePropertyAPI: Omit<IssuePropertyAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'issue_type'|'logo_props'|'name'|'project'|'settings'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesCreate2Request {
    projectId: string;
    propertyId: string;
    slug: string;
    typeId: string;
    issuePropertyAPI: Omit<IssuePropertyAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'issue_type'|'logo_props'|'name'|'project'|'settings'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesDestroyRequest {
    projectId: string;
    slug: string;
    typeId: string;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesDestroy2Request {
    projectId: string;
    propertyId: string;
    slug: string;
    typeId: string;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesPartialUpdateRequest {
    projectId: string;
    slug: string;
    typeId: string;
    patchedIssuePropertyAPI?: Omit<PatchedIssuePropertyAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'issue_type'|'logo_props'|'name'|'project'|'settings'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesPartialUpdate2Request {
    projectId: string;
    propertyId: string;
    slug: string;
    typeId: string;
    patchedIssuePropertyAPI?: Omit<PatchedIssuePropertyAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'issue_type'|'logo_props'|'name'|'project'|'settings'|'sort_order'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesRetrieveRequest {
    projectId: string;
    slug: string;
    typeId: string;
}

export interface WorkspacesProjectsIssueTypesIssuePropertiesRetrieve2Request {
    projectId: string;
    propertyId: string;
    slug: string;
    typeId: string;
}

export interface WorkspacesProjectsIssueTypesPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedIssueTypeAPI?: Omit<PatchedIssueTypeAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'is_default'|'level'|'logo_props'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesPartialUpdate2Request {
    projectId: string;
    slug: string;
    typeId: string;
    patchedIssueTypeAPI?: Omit<PatchedIssueTypeAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'is_default'|'level'|'logo_props'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssueTypesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssueTypesRetrieve2Request {
    projectId: string;
    slug: string;
    typeId: string;
}

export interface WorkspacesProjectsIssuesActivitiesRetrieveRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesActivitiesRetrieve2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesCommentsCreateRequest {
    issueId: string;
    projectId: string;
    slug: string;
    issueComment?: Omit<IssueComment, 'created_at'|'created_by'|'id'|'is_member'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesCommentsCreate2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
    issueComment?: Omit<IssueComment, 'created_at'|'created_by'|'id'|'is_member'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesCommentsDestroyRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesCommentsDestroy2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesCommentsPartialUpdateRequest {
    issueId: string;
    projectId: string;
    slug: string;
    patchedIssueComment?: Omit<PatchedIssueComment, 'created_at'|'created_by'|'id'|'is_member'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesCommentsPartialUpdate2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
    patchedIssueComment?: Omit<PatchedIssueComment, 'created_at'|'created_by'|'id'|'is_member'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesCommentsRetrieveRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesCommentsRetrieve2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesCreateRequest {
    projectId: string;
    slug: string;
    issue: Omit<Issue, 'created_at'|'description_binary'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesCreate2Request {
    id: string;
    projectId: string;
    slug: string;
    issue: Omit<Issue, 'created_at'|'description_binary'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesDestroy2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesIssueAttachmentsCreateRequest {
    issueId: string;
    projectId: string;
    slug: string;
    asset: string;
    createdAt: Date;
    id: string;
    issue: string | null;
    project: string | null;
    updatedAt: Date;
    updatedBy: string | null;
    workspace: string | null;
    attributes?: any | null;
    comment?: string | null;
    createdBy?: string | null;
    deletedAt?: Date | null;
    draftIssue?: string | null;
    entityType?: IssueAttachmentEntityType | null;
    externalId?: string | null;
    externalSource?: string | null;
    isArchived?: boolean;
    isDeleted?: boolean;
    isUploaded?: boolean;
    page?: string | null;
    size?: number;
    storageMetadata?: any | null;
    user?: string | null;
}

export interface WorkspacesProjectsIssuesIssueAttachmentsDestroyRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesIssueAttachmentsRetrieveRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesIssuePropertiesValuesCreateRequest {
    issueId: string;
    projectId: string;
    propertyId: string;
    slug: string;
    issuePropertyValueAPI: Omit<IssuePropertyValueAPI, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesIssuePropertiesValuesRetrieveRequest {
    issueId: string;
    projectId: string;
    propertyId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesLinksCreateRequest {
    issueId: string;
    projectId: string;
    slug: string;
    issueLink: Omit<IssueLink, 'created_at'|'created_by'|'id'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesLinksCreate2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
    issueLink: Omit<IssueLink, 'created_at'|'created_by'|'id'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesLinksDestroyRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesLinksDestroy2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesLinksPartialUpdateRequest {
    issueId: string;
    projectId: string;
    slug: string;
    patchedIssueLink?: Omit<PatchedIssueLink, 'created_at'|'created_by'|'id'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesLinksPartialUpdate2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
    patchedIssueLink?: Omit<PatchedIssueLink, 'created_at'|'created_by'|'id'|'issue'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesLinksRetrieveRequest {
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesLinksRetrieve2Request {
    id: string;
    issueId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedIssue?: Omit<PatchedIssue, 'created_at'|'description_binary'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesPartialUpdate2Request {
    id: string;
    projectId: string;
    slug: string;
    patchedIssue?: Omit<PatchedIssue, 'created_at'|'description_binary'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesRetrieve2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsIssuesUpdateRequest {
    projectId: string;
    slug: string;
    issue: Omit<Issue, 'created_at'|'description_binary'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsIssuesUpdate2Request {
    id: string;
    projectId: string;
    slug: string;
    issue: Omit<Issue, 'created_at'|'description_binary'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsLabelsCreateRequest {
    projectId: string;
    slug: string;
    label: Omit<Label, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsLabelsCreate2Request {
    id: string;
    projectId: string;
    slug: string;
    label: Omit<Label, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsLabelsDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsLabelsDestroy2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsLabelsPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedLabel?: Omit<PatchedLabel, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsLabelsPartialUpdate2Request {
    id: string;
    projectId: string;
    slug: string;
    patchedLabel?: Omit<PatchedLabel, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsLabelsRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsLabelsRetrieve2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsMembersCreateRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsMembersRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesArchiveCreateRequest {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesArchiveDestroyRequest {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesArchiveRetrieveRequest {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesCreateRequest {
    projectId: string;
    slug: string;
    module: Omit<Module, 'backlog_issues'|'cancelled_issues'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'project'|'started_issues'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsModulesCreate2Request {
    id: string;
    projectId: string;
    slug: string;
    module: Omit<Module, 'backlog_issues'|'cancelled_issues'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'project'|'started_issues'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsModulesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesDestroy2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesModuleIssuesCreateRequest {
    moduleId: string;
    projectId: string;
    slug: string;
    moduleIssue: Omit<ModuleIssue, 'created_at'|'created_by'|'id'|'module'|'project'|'sub_issues_count'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsModulesModuleIssuesCreate2Request {
    issueId: string;
    moduleId: string;
    projectId: string;
    slug: string;
    moduleIssue: Omit<ModuleIssue, 'created_at'|'created_by'|'id'|'module'|'project'|'sub_issues_count'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsModulesModuleIssuesDestroyRequest {
    moduleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesModuleIssuesDestroy2Request {
    issueId: string;
    moduleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesModuleIssuesRetrieveRequest {
    moduleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesModuleIssuesRetrieve2Request {
    issueId: string;
    moduleId: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedModule?: Omit<PatchedModule, 'backlog_issues'|'cancelled_issues'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'project'|'started_issues'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsModulesPartialUpdate2Request {
    id: string;
    projectId: string;
    slug: string;
    patchedModule?: Omit<PatchedModule, 'backlog_issues'|'cancelled_issues'|'completed_issues'|'created_at'|'created_by'|'deleted_at'|'id'|'project'|'started_issues'|'total_issues'|'unstarted_issues'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsModulesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsModulesRetrieve2Request {
    id: string;
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsPartialUpdateRequest {
    slug: string;
    patchedProject?: Omit<PatchedProject, 'cover_image_url'|'created_at'|'created_by'|'deleted_at'|'emoji'|'id'|'is_deployed'|'is_member'|'member_role'|'sort_order'|'total_cycles'|'total_members'|'total_modules'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsPartialUpdate2Request {
    id: string;
    slug: string;
    patchedProject?: Omit<PatchedProject, 'cover_image_url'|'created_at'|'created_by'|'deleted_at'|'emoji'|'id'|'is_deployed'|'is_member'|'member_role'|'sort_order'|'total_cycles'|'total_members'|'total_modules'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsRetrieveRequest {
    slug: string;
}

export interface WorkspacesProjectsRetrieve2Request {
    id: string;
    slug: string;
}

export interface WorkspacesProjectsStatesCreateRequest {
    projectId: string;
    slug: string;
    state: Omit<State, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsStatesCreate2Request {
    projectId: string;
    slug: string;
    stateId: string;
    state: Omit<State, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsStatesDestroyRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsStatesDestroy2Request {
    projectId: string;
    slug: string;
    stateId: string;
}

export interface WorkspacesProjectsStatesPartialUpdateRequest {
    projectId: string;
    slug: string;
    patchedState?: Omit<PatchedState, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsStatesPartialUpdate2Request {
    projectId: string;
    slug: string;
    stateId: string;
    patchedState?: Omit<PatchedState, 'created_at'|'created_by'|'deleted_at'|'id'|'project'|'updated_at'|'updated_by'|'workspace'>;
}

export interface WorkspacesProjectsStatesRetrieveRequest {
    projectId: string;
    slug: string;
}

export interface WorkspacesProjectsStatesRetrieve2Request {
    projectId: string;
    slug: string;
    stateId: string;
}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     * This viewset provides `retrieveByIssueId` on workspace level
     */
    async workspacesIssuesRetrieveRaw(requestParameters: WorkspacesIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['issueIdentifier'] == null) {
            throw new runtime.RequiredError(
                'issueIdentifier',
                'Required parameter "issueIdentifier" was null or undefined when calling workspacesIssuesRetrieve().'
            );
        }

        if (requestParameters['projectIdentifier'] == null) {
            throw new runtime.RequiredError(
                'projectIdentifier',
                'Required parameter "projectIdentifier" was null or undefined when calling workspacesIssuesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesIssuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/issues/{project__identifier}-{issue__identifier}/`.replace(`{${"issue__identifier"}}`, encodeURIComponent(String(requestParameters['issueIdentifier']))).replace(`{${"project__identifier"}}`, encodeURIComponent(String(requestParameters['projectIdentifier']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset provides `retrieveByIssueId` on workspace level
     */
    async workspacesIssuesRetrieve(requestParameters: WorkspacesIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesIssuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchiveCreateRaw(requestParameters: WorkspacesProjectsArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchiveCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchiveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archive/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchiveCreate(requestParameters: WorkspacesProjectsArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchiveCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchiveDestroyRaw(requestParameters: WorkspacesProjectsArchiveDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchiveDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchiveDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archive/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchiveDestroy(requestParameters: WorkspacesProjectsArchiveDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchiveDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedCyclesCreateRaw(requestParameters: WorkspacesProjectsArchivedCyclesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchivedCyclesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchivedCyclesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archived-cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedCyclesCreate(requestParameters: WorkspacesProjectsArchivedCyclesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchivedCyclesCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedCyclesDestroyRaw(requestParameters: WorkspacesProjectsArchivedCyclesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchivedCyclesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchivedCyclesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archived-cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedCyclesDestroy(requestParameters: WorkspacesProjectsArchivedCyclesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchivedCyclesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedCyclesRetrieveRaw(requestParameters: WorkspacesProjectsArchivedCyclesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchivedCyclesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchivedCyclesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archived-cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedCyclesRetrieve(requestParameters: WorkspacesProjectsArchivedCyclesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchivedCyclesRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedModulesCreateRaw(requestParameters: WorkspacesProjectsArchivedModulesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchivedModulesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchivedModulesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archived-modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedModulesCreate(requestParameters: WorkspacesProjectsArchivedModulesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchivedModulesCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedModulesDestroyRaw(requestParameters: WorkspacesProjectsArchivedModulesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchivedModulesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchivedModulesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archived-modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedModulesDestroy(requestParameters: WorkspacesProjectsArchivedModulesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchivedModulesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedModulesRetrieveRaw(requestParameters: WorkspacesProjectsArchivedModulesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsArchivedModulesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsArchivedModulesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/archived-modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsArchivedModulesRetrieve(requestParameters: WorkspacesProjectsArchivedModulesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsArchivedModulesRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsCreateRaw(requestParameters: WorkspacesProjectsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workspacesProjectsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsCreate(requestParameters: WorkspacesProjectsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.workspacesProjectsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsCreate2Raw(requestParameters: WorkspacesProjectsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCreate2().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workspacesProjectsCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsCreate2(requestParameters: WorkspacesProjectsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.workspacesProjectsCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsCyclesArchiveCreateRaw(requestParameters: WorkspacesProjectsCyclesArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesArchiveCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesArchiveCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesArchiveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/archive/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsCyclesArchiveCreate(requestParameters: WorkspacesProjectsCyclesArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesArchiveCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsCyclesArchiveDestroyRaw(requestParameters: WorkspacesProjectsCyclesArchiveDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesArchiveDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesArchiveDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesArchiveDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/archive/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsCyclesArchiveDestroy(requestParameters: WorkspacesProjectsCyclesArchiveDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesArchiveDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsCyclesArchiveRetrieveRaw(requestParameters: WorkspacesProjectsCyclesArchiveRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesArchiveRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesArchiveRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesArchiveRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/archive/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsCyclesArchiveRetrieve(requestParameters: WorkspacesProjectsCyclesArchiveRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesArchiveRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesCreateRaw(requestParameters: WorkspacesProjectsCyclesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cycle>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCreate().'
            );
        }

        if (requestParameters['cycle'] == null) {
            throw new runtime.RequiredError(
                'cycle',
                'Required parameter "cycle" was null or undefined when calling workspacesProjectsCyclesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CycleToJSON(requestParameters['cycle']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesCreate(requestParameters: WorkspacesProjectsCyclesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cycle> {
        const response = await this.workspacesProjectsCyclesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesCreate2Raw(requestParameters: WorkspacesProjectsCyclesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cycle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsCyclesCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCreate2().'
            );
        }

        if (requestParameters['cycle'] == null) {
            throw new runtime.RequiredError(
                'cycle',
                'Required parameter "cycle" was null or undefined when calling workspacesProjectsCyclesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CycleToJSON(requestParameters['cycle']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesCreate2(requestParameters: WorkspacesProjectsCyclesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cycle> {
        const response = await this.workspacesProjectsCyclesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesCreateRaw(requestParameters: WorkspacesProjectsCyclesCycleIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CycleIssue>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate().'
            );
        }

        if (requestParameters['cycleIssue'] == null) {
            throw new runtime.RequiredError(
                'cycleIssue',
                'Required parameter "cycleIssue" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/cycle-issues/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CycleIssueToJSON(requestParameters['cycleIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesCreate(requestParameters: WorkspacesProjectsCyclesCycleIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CycleIssue> {
        const response = await this.workspacesProjectsCyclesCycleIssuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesCreate2Raw(requestParameters: WorkspacesProjectsCyclesCycleIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CycleIssue>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate2().'
            );
        }

        if (requestParameters['cycleIssue'] == null) {
            throw new runtime.RequiredError(
                'cycleIssue',
                'Required parameter "cycleIssue" was null or undefined when calling workspacesProjectsCyclesCycleIssuesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/cycle-issues/{issue_id}/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CycleIssueToJSON(requestParameters['cycleIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesCreate2(requestParameters: WorkspacesProjectsCyclesCycleIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CycleIssue> {
        const response = await this.workspacesProjectsCyclesCycleIssuesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesDestroyRaw(requestParameters: WorkspacesProjectsCyclesCycleIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/cycle-issues/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesDestroy(requestParameters: WorkspacesProjectsCyclesCycleIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesCycleIssuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesDestroy2Raw(requestParameters: WorkspacesProjectsCyclesCycleIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCycleIssuesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/cycle-issues/{issue_id}/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesDestroy2(requestParameters: WorkspacesProjectsCyclesCycleIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesCycleIssuesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesRetrieveRaw(requestParameters: WorkspacesProjectsCyclesCycleIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CycleIssue>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/cycle-issues/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesRetrieve(requestParameters: WorkspacesProjectsCyclesCycleIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CycleIssue> {
        const response = await this.workspacesProjectsCyclesCycleIssuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesRetrieve2Raw(requestParameters: WorkspacesProjectsCyclesCycleIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CycleIssue>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesCycleIssuesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/cycle-issues/{issue_id}/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, and `destroy` actions related to cycle issues.
     */
    async workspacesProjectsCyclesCycleIssuesRetrieve2(requestParameters: WorkspacesProjectsCyclesCycleIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CycleIssue> {
        const response = await this.workspacesProjectsCyclesCycleIssuesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesDestroyRaw(requestParameters: WorkspacesProjectsCyclesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesDestroy(requestParameters: WorkspacesProjectsCyclesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesDestroy2Raw(requestParameters: WorkspacesProjectsCyclesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsCyclesDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesDestroy2(requestParameters: WorkspacesProjectsCyclesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesPartialUpdateRaw(requestParameters: WorkspacesProjectsCyclesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cycle>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCycleToJSON(requestParameters['patchedCycle']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesPartialUpdate(requestParameters: WorkspacesProjectsCyclesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cycle> {
        const response = await this.workspacesProjectsCyclesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesPartialUpdate2Raw(requestParameters: WorkspacesProjectsCyclesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cycle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsCyclesPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCycleToJSON(requestParameters['patchedCycle']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesPartialUpdate2(requestParameters: WorkspacesProjectsCyclesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cycle> {
        const response = await this.workspacesProjectsCyclesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesRetrieveRaw(requestParameters: WorkspacesProjectsCyclesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cycle>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesRetrieve(requestParameters: WorkspacesProjectsCyclesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cycle> {
        const response = await this.workspacesProjectsCyclesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesRetrieve2Raw(requestParameters: WorkspacesProjectsCyclesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cycle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsCyclesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CycleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to cycle.
     */
    async workspacesProjectsCyclesRetrieve2(requestParameters: WorkspacesProjectsCyclesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cycle> {
        const response = await this.workspacesProjectsCyclesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset provides `create` actions for transferring the issues into a particular cycle.
     */
    async workspacesProjectsCyclesTransferIssuesCreateRaw(requestParameters: WorkspacesProjectsCyclesTransferIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cycleId'] == null) {
            throw new runtime.RequiredError(
                'cycleId',
                'Required parameter "cycleId" was null or undefined when calling workspacesProjectsCyclesTransferIssuesCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsCyclesTransferIssuesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsCyclesTransferIssuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/cycles/{cycle_id}/transfer-issues/`.replace(`{${"cycle_id"}}`, encodeURIComponent(String(requestParameters['cycleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset provides `create` actions for transferring the issues into a particular cycle.
     */
    async workspacesProjectsCyclesTransferIssuesCreate(requestParameters: WorkspacesProjectsCyclesTransferIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsCyclesTransferIssuesCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsDestroyRaw(requestParameters: WorkspacesProjectsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsDestroy(requestParameters: WorkspacesProjectsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsDestroy2Raw(requestParameters: WorkspacesProjectsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsDestroy2(requestParameters: WorkspacesProjectsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesCreateRaw(requestParameters: WorkspacesProjectsInboxIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxIssue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesCreate().'
            );
        }

        if (requestParameters['inboxIssue'] == null) {
            throw new runtime.RequiredError(
                'inboxIssue',
                'Required parameter "inboxIssue" was null or undefined when calling workspacesProjectsInboxIssuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InboxIssueToJSON(requestParameters['inboxIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesCreate(requestParameters: WorkspacesProjectsInboxIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxIssue> {
        const response = await this.workspacesProjectsInboxIssuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesCreate2Raw(requestParameters: WorkspacesProjectsInboxIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxIssue>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsInboxIssuesCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesCreate2().'
            );
        }

        if (requestParameters['inboxIssue'] == null) {
            throw new runtime.RequiredError(
                'inboxIssue',
                'Required parameter "inboxIssue" was null or undefined when calling workspacesProjectsInboxIssuesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InboxIssueToJSON(requestParameters['inboxIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesCreate2(requestParameters: WorkspacesProjectsInboxIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxIssue> {
        const response = await this.workspacesProjectsInboxIssuesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesDestroyRaw(requestParameters: WorkspacesProjectsInboxIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesDestroy(requestParameters: WorkspacesProjectsInboxIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsInboxIssuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesDestroy2Raw(requestParameters: WorkspacesProjectsInboxIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsInboxIssuesDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesDestroy2(requestParameters: WorkspacesProjectsInboxIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsInboxIssuesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesPartialUpdateRaw(requestParameters: WorkspacesProjectsInboxIssuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxIssue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInboxIssueToJSON(requestParameters['patchedInboxIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesPartialUpdate(requestParameters: WorkspacesProjectsInboxIssuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxIssue> {
        const response = await this.workspacesProjectsInboxIssuesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesPartialUpdate2Raw(requestParameters: WorkspacesProjectsInboxIssuesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxIssue>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsInboxIssuesPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInboxIssueToJSON(requestParameters['patchedInboxIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesPartialUpdate2(requestParameters: WorkspacesProjectsInboxIssuesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxIssue> {
        const response = await this.workspacesProjectsInboxIssuesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesRetrieveRaw(requestParameters: WorkspacesProjectsInboxIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxIssue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesRetrieve(requestParameters: WorkspacesProjectsInboxIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxIssue> {
        const response = await this.workspacesProjectsInboxIssuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesRetrieve2Raw(requestParameters: WorkspacesProjectsInboxIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxIssue>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsInboxIssuesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsInboxIssuesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsInboxIssuesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/inbox-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to inbox issues.
     */
    async workspacesProjectsInboxIssuesRetrieve2(requestParameters: WorkspacesProjectsInboxIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxIssue> {
        const response = await this.workspacesProjectsInboxIssuesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsCreateRaw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyOptionAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate().'
            );
        }

        if (requestParameters['issuePropertyOptionAPI'] == null) {
            throw new runtime.RequiredError(
                'issuePropertyOptionAPI',
                'Required parameter "issuePropertyOptionAPI" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssuePropertyOptionAPIToJSON(requestParameters['issuePropertyOptionAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyOptionAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsCreate(requestParameters: WorkspacesProjectsIssuePropertiesOptionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyOptionAPI> {
        const response = await this.workspacesProjectsIssuePropertiesOptionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsCreate2Raw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyOptionAPI>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate2().'
            );
        }

        if (requestParameters['issuePropertyOptionAPI'] == null) {
            throw new runtime.RequiredError(
                'issuePropertyOptionAPI',
                'Required parameter "issuePropertyOptionAPI" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/{option_id}/`.replace(`{${"option_id"}}`, encodeURIComponent(String(requestParameters['optionId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssuePropertyOptionAPIToJSON(requestParameters['issuePropertyOptionAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyOptionAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsCreate2(requestParameters: WorkspacesProjectsIssuePropertiesOptionsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyOptionAPI> {
        const response = await this.workspacesProjectsIssuePropertiesOptionsCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsDestroyRaw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsDestroy(requestParameters: WorkspacesProjectsIssuePropertiesOptionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuePropertiesOptionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsDestroy2Raw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/{option_id}/`.replace(`{${"option_id"}}`, encodeURIComponent(String(requestParameters['optionId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsDestroy2(requestParameters: WorkspacesProjectsIssuePropertiesOptionsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuePropertiesOptionsDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsPartialUpdateRaw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyOptionAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssuePropertyOptionAPIToJSON(requestParameters['patchedIssuePropertyOptionAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyOptionAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsPartialUpdate(requestParameters: WorkspacesProjectsIssuePropertiesOptionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyOptionAPI> {
        const response = await this.workspacesProjectsIssuePropertiesOptionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsPartialUpdate2Raw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyOptionAPI>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/{option_id}/`.replace(`{${"option_id"}}`, encodeURIComponent(String(requestParameters['optionId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssuePropertyOptionAPIToJSON(requestParameters['patchedIssuePropertyOptionAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyOptionAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsPartialUpdate2(requestParameters: WorkspacesProjectsIssuePropertiesOptionsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyOptionAPI> {
        const response = await this.workspacesProjectsIssuePropertiesOptionsPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsRetrieveRaw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyOptionAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyOptionAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsRetrieve(requestParameters: WorkspacesProjectsIssuePropertiesOptionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyOptionAPI> {
        const response = await this.workspacesProjectsIssuePropertiesOptionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsRetrieve2Raw(requestParameters: WorkspacesProjectsIssuePropertiesOptionsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyOptionAPI>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuePropertiesOptionsRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-properties/{property_id}/options/{option_id}/`.replace(`{${"option_id"}}`, encodeURIComponent(String(requestParameters['optionId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyOptionAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue property options.
     */
    async workspacesProjectsIssuePropertiesOptionsRetrieve2(requestParameters: WorkspacesProjectsIssuePropertiesOptionsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyOptionAPI> {
        const response = await this.workspacesProjectsIssuePropertiesOptionsRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesCreateRaw(requestParameters: WorkspacesProjectsIssueTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesCreate().'
            );
        }

        if (requestParameters['issueTypeAPI'] == null) {
            throw new runtime.RequiredError(
                'issueTypeAPI',
                'Required parameter "issueTypeAPI" was null or undefined when calling workspacesProjectsIssueTypesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueTypeAPIToJSON(requestParameters['issueTypeAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueTypeAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesCreate(requestParameters: WorkspacesProjectsIssueTypesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeAPI> {
        const response = await this.workspacesProjectsIssueTypesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesCreate2Raw(requestParameters: WorkspacesProjectsIssueTypesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesCreate2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesCreate2().'
            );
        }

        if (requestParameters['issueTypeAPI'] == null) {
            throw new runtime.RequiredError(
                'issueTypeAPI',
                'Required parameter "issueTypeAPI" was null or undefined when calling workspacesProjectsIssueTypesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueTypeAPIToJSON(requestParameters['issueTypeAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueTypeAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesCreate2(requestParameters: WorkspacesProjectsIssueTypesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeAPI> {
        const response = await this.workspacesProjectsIssueTypesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesDestroyRaw(requestParameters: WorkspacesProjectsIssueTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesDestroy(requestParameters: WorkspacesProjectsIssueTypesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssueTypesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesDestroy2Raw(requestParameters: WorkspacesProjectsIssueTypesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesDestroy2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesDestroy2(requestParameters: WorkspacesProjectsIssueTypesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssueTypesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesCreateRaw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate().'
            );
        }

        if (requestParameters['issuePropertyAPI'] == null) {
            throw new runtime.RequiredError(
                'issuePropertyAPI',
                'Required parameter "issuePropertyAPI" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssuePropertyAPIToJSON(requestParameters['issuePropertyAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesCreate(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyAPI> {
        const response = await this.workspacesProjectsIssueTypesIssuePropertiesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesCreate2Raw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate2().'
            );
        }

        if (requestParameters['issuePropertyAPI'] == null) {
            throw new runtime.RequiredError(
                'issuePropertyAPI',
                'Required parameter "issuePropertyAPI" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/{property_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssuePropertyAPIToJSON(requestParameters['issuePropertyAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesCreate2(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyAPI> {
        const response = await this.workspacesProjectsIssueTypesIssuePropertiesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesDestroyRaw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesDestroy(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssueTypesIssuePropertiesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesDestroy2Raw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/{property_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesDestroy2(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssueTypesIssuePropertiesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesPartialUpdateRaw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssuePropertyAPIToJSON(requestParameters['patchedIssuePropertyAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesPartialUpdate(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyAPI> {
        const response = await this.workspacesProjectsIssueTypesIssuePropertiesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2Raw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/{property_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssuePropertyAPIToJSON(requestParameters['patchedIssuePropertyAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyAPI> {
        const response = await this.workspacesProjectsIssueTypesIssuePropertiesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesRetrieveRaw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesRetrieve(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyAPI> {
        const response = await this.workspacesProjectsIssueTypesIssuePropertiesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesRetrieve2Raw(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve2().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesIssuePropertiesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/issue-properties/{property_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue type properties.
     */
    async workspacesProjectsIssueTypesIssuePropertiesRetrieve2(requestParameters: WorkspacesProjectsIssueTypesIssuePropertiesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyAPI> {
        const response = await this.workspacesProjectsIssueTypesIssuePropertiesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesPartialUpdateRaw(requestParameters: WorkspacesProjectsIssueTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueTypeAPIToJSON(requestParameters['patchedIssueTypeAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueTypeAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesPartialUpdate(requestParameters: WorkspacesProjectsIssueTypesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeAPI> {
        const response = await this.workspacesProjectsIssueTypesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesPartialUpdate2Raw(requestParameters: WorkspacesProjectsIssueTypesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesPartialUpdate2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueTypeAPIToJSON(requestParameters['patchedIssueTypeAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueTypeAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesPartialUpdate2(requestParameters: WorkspacesProjectsIssueTypesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeAPI> {
        const response = await this.workspacesProjectsIssueTypesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesRetrieveRaw(requestParameters: WorkspacesProjectsIssueTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueTypeAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesRetrieve(requestParameters: WorkspacesProjectsIssueTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeAPI> {
        const response = await this.workspacesProjectsIssueTypesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesRetrieve2Raw(requestParameters: WorkspacesProjectsIssueTypesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeAPI>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssueTypesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssueTypesRetrieve2().'
            );
        }

        if (requestParameters['typeId'] == null) {
            throw new runtime.RequiredError(
                'typeId',
                'Required parameter "typeId" was null or undefined when calling workspacesProjectsIssueTypesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issue-types/{type_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"type_id"}}`, encodeURIComponent(String(requestParameters['typeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueTypeAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue types.
     */
    async workspacesProjectsIssueTypesRetrieve2(requestParameters: WorkspacesProjectsIssueTypesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeAPI> {
        const response = await this.workspacesProjectsIssueTypesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesActivitiesRetrieveRaw(requestParameters: WorkspacesProjectsIssuesActivitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/activities/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesActivitiesRetrieve(requestParameters: WorkspacesProjectsIssuesActivitiesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesActivitiesRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesActivitiesRetrieve2Raw(requestParameters: WorkspacesProjectsIssuesActivitiesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesActivitiesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/activities/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesActivitiesRetrieve2(requestParameters: WorkspacesProjectsIssuesActivitiesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesActivitiesRetrieve2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsCreateRaw(requestParameters: WorkspacesProjectsIssuesCommentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueComment>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueCommentToJSON(requestParameters['issueComment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueCommentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsCreate(requestParameters: WorkspacesProjectsIssuesCommentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueComment> {
        const response = await this.workspacesProjectsIssuesCommentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsCreate2Raw(requestParameters: WorkspacesProjectsIssuesCommentsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueComment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesCommentsCreate2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueCommentToJSON(requestParameters['issueComment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueCommentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsCreate2(requestParameters: WorkspacesProjectsIssuesCommentsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueComment> {
        const response = await this.workspacesProjectsIssuesCommentsCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsDestroyRaw(requestParameters: WorkspacesProjectsIssuesCommentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsDestroy(requestParameters: WorkspacesProjectsIssuesCommentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesCommentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsDestroy2Raw(requestParameters: WorkspacesProjectsIssuesCommentsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsDestroy2(requestParameters: WorkspacesProjectsIssuesCommentsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesCommentsDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsPartialUpdateRaw(requestParameters: WorkspacesProjectsIssuesCommentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueComment>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueCommentToJSON(requestParameters['patchedIssueComment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueCommentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsPartialUpdate(requestParameters: WorkspacesProjectsIssuesCommentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueComment> {
        const response = await this.workspacesProjectsIssuesCommentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsPartialUpdate2Raw(requestParameters: WorkspacesProjectsIssuesCommentsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueComment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueCommentToJSON(requestParameters['patchedIssueComment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueCommentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsPartialUpdate2(requestParameters: WorkspacesProjectsIssuesCommentsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueComment> {
        const response = await this.workspacesProjectsIssuesCommentsPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsRetrieveRaw(requestParameters: WorkspacesProjectsIssuesCommentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueComment>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueCommentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsRetrieve(requestParameters: WorkspacesProjectsIssuesCommentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueComment> {
        const response = await this.workspacesProjectsIssuesCommentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsRetrieve2Raw(requestParameters: WorkspacesProjectsIssuesCommentsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueComment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCommentsRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/comments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueCommentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to comments of the particular issue.
     */
    async workspacesProjectsIssuesCommentsRetrieve2(requestParameters: WorkspacesProjectsIssuesCommentsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueComment> {
        const response = await this.workspacesProjectsIssuesCommentsRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesCreateRaw(requestParameters: WorkspacesProjectsIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCreate().'
            );
        }

        if (requestParameters['issue'] == null) {
            throw new runtime.RequiredError(
                'issue',
                'Required parameter "issue" was null or undefined when calling workspacesProjectsIssuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueToJSON(requestParameters['issue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesCreate(requestParameters: WorkspacesProjectsIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesCreate2Raw(requestParameters: WorkspacesProjectsIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesCreate2().'
            );
        }

        if (requestParameters['issue'] == null) {
            throw new runtime.RequiredError(
                'issue',
                'Required parameter "issue" was null or undefined when calling workspacesProjectsIssuesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueToJSON(requestParameters['issue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesCreate2(requestParameters: WorkspacesProjectsIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesDestroyRaw(requestParameters: WorkspacesProjectsIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesDestroy(requestParameters: WorkspacesProjectsIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesDestroy2Raw(requestParameters: WorkspacesProjectsIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesDestroy2(requestParameters: WorkspacesProjectsIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesIssueAttachmentsCreateRaw(requestParameters: WorkspacesProjectsIssuesIssueAttachmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueAttachment>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['asset'] == null) {
            throw new runtime.RequiredError(
                'asset',
                'Required parameter "asset" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['createdAt'] == null) {
            throw new runtime.RequiredError(
                'createdAt',
                'Required parameter "createdAt" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['issue'] == null) {
            throw new runtime.RequiredError(
                'issue',
                'Required parameter "issue" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['updatedAt'] == null) {
            throw new runtime.RequiredError(
                'updatedAt',
                'Required parameter "updatedAt" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['updatedBy'] == null) {
            throw new runtime.RequiredError(
                'updatedBy',
                'Required parameter "updatedBy" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['asset'] != null) {
            formParams.append('asset', requestParameters['asset'] as any);
        }

        if (requestParameters['attributes'] != null) {
            formParams.append('attributes', new Blob([JSON.stringify(IssueAttachmentToJSON(requestParameters['attributes']))], { type: "application/json", }));
                    }

        if (requestParameters['comment'] != null) {
            formParams.append('comment', requestParameters['comment'] as any);
        }

        if (requestParameters['createdAt'] != null) {
            formParams.append('created_at', (requestParameters['createdAt'] as any).toISOString());
        }

        if (requestParameters['createdBy'] != null) {
            formParams.append('created_by', requestParameters['createdBy'] as any);
        }

        if (requestParameters['deletedAt'] != null) {
            formParams.append('deleted_at', (requestParameters['deletedAt'] as any).toISOString());
        }

        if (requestParameters['draftIssue'] != null) {
            formParams.append('draft_issue', requestParameters['draftIssue'] as any);
        }

        if (requestParameters['entityType'] != null) {
            formParams.append('entity_type', new Blob([JSON.stringify(IssueAttachmentToJSON(requestParameters['entityType']))], { type: "application/json", }));
                    }

        if (requestParameters['externalId'] != null) {
            formParams.append('external_id', requestParameters['externalId'] as any);
        }

        if (requestParameters['externalSource'] != null) {
            formParams.append('external_source', requestParameters['externalSource'] as any);
        }

        if (requestParameters['id'] != null) {
            formParams.append('id', requestParameters['id'] as any);
        }

        if (requestParameters['isArchived'] != null) {
            formParams.append('is_archived', requestParameters['isArchived'] as any);
        }

        if (requestParameters['isDeleted'] != null) {
            formParams.append('is_deleted', requestParameters['isDeleted'] as any);
        }

        if (requestParameters['isUploaded'] != null) {
            formParams.append('is_uploaded', requestParameters['isUploaded'] as any);
        }

        if (requestParameters['issue'] != null) {
            formParams.append('issue', requestParameters['issue'] as any);
        }

        if (requestParameters['page'] != null) {
            formParams.append('page', requestParameters['page'] as any);
        }

        if (requestParameters['project'] != null) {
            formParams.append('project', requestParameters['project'] as any);
        }

        if (requestParameters['size'] != null) {
            formParams.append('size', requestParameters['size'] as any);
        }

        if (requestParameters['storageMetadata'] != null) {
            formParams.append('storage_metadata', new Blob([JSON.stringify(IssueAttachmentToJSON(requestParameters['storageMetadata']))], { type: "application/json", }));
                    }

        if (requestParameters['updatedAt'] != null) {
            formParams.append('updated_at', (requestParameters['updatedAt'] as any).toISOString());
        }

        if (requestParameters['updatedBy'] != null) {
            formParams.append('updated_by', requestParameters['updatedBy'] as any);
        }

        if (requestParameters['user'] != null) {
            formParams.append('user', requestParameters['user'] as any);
        }

        if (requestParameters['workspace'] != null) {
            formParams.append('workspace', requestParameters['workspace'] as any);
        }

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/issue-attachments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueAttachmentFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesIssueAttachmentsCreate(requestParameters: WorkspacesProjectsIssuesIssueAttachmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueAttachment> {
        const response = await this.workspacesProjectsIssuesIssueAttachmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesIssueAttachmentsDestroyRaw(requestParameters: WorkspacesProjectsIssuesIssueAttachmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/issue-attachments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesIssueAttachmentsDestroy(requestParameters: WorkspacesProjectsIssuesIssueAttachmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesIssueAttachmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesIssueAttachmentsRetrieveRaw(requestParameters: WorkspacesProjectsIssuesIssueAttachmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueAttachment>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesIssueAttachmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/issue-attachments/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueAttachmentFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsIssuesIssueAttachmentsRetrieve(requestParameters: WorkspacesProjectsIssuesIssueAttachmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueAttachment> {
        const response = await this.workspacesProjectsIssuesIssueAttachmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, and `update` actions related to issue property values.
     */
    async workspacesProjectsIssuesIssuePropertiesValuesCreateRaw(requestParameters: WorkspacesProjectsIssuesIssuePropertiesValuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyValueAPI>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesCreate().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesCreate().'
            );
        }

        if (requestParameters['issuePropertyValueAPI'] == null) {
            throw new runtime.RequiredError(
                'issuePropertyValueAPI',
                'Required parameter "issuePropertyValueAPI" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/issue-properties/{property_id}/values/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssuePropertyValueAPIToJSON(requestParameters['issuePropertyValueAPI']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyValueAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, and `update` actions related to issue property values.
     */
    async workspacesProjectsIssuesIssuePropertiesValuesCreate(requestParameters: WorkspacesProjectsIssuesIssuePropertiesValuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyValueAPI> {
        const response = await this.workspacesProjectsIssuesIssuePropertiesValuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, and `update` actions related to issue property values.
     */
    async workspacesProjectsIssuesIssuePropertiesValuesRetrieveRaw(requestParameters: WorkspacesProjectsIssuesIssuePropertiesValuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePropertyValueAPI>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesRetrieve().'
            );
        }

        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesIssuePropertiesValuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/issue-properties/{property_id}/values/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"property_id"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssuePropertyValueAPIFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, and `update` actions related to issue property values.
     */
    async workspacesProjectsIssuesIssuePropertiesValuesRetrieve(requestParameters: WorkspacesProjectsIssuesIssuePropertiesValuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePropertyValueAPI> {
        const response = await this.workspacesProjectsIssuesIssuePropertiesValuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksCreateRaw(requestParameters: WorkspacesProjectsIssuesLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueLink>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksCreate().'
            );
        }

        if (requestParameters['issueLink'] == null) {
            throw new runtime.RequiredError(
                'issueLink',
                'Required parameter "issueLink" was null or undefined when calling workspacesProjectsIssuesLinksCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueLinkToJSON(requestParameters['issueLink']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueLinkFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksCreate(requestParameters: WorkspacesProjectsIssuesLinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueLink> {
        const response = await this.workspacesProjectsIssuesLinksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksCreate2Raw(requestParameters: WorkspacesProjectsIssuesLinksCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueLink>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesLinksCreate2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksCreate2().'
            );
        }

        if (requestParameters['issueLink'] == null) {
            throw new runtime.RequiredError(
                'issueLink',
                'Required parameter "issueLink" was null or undefined when calling workspacesProjectsIssuesLinksCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueLinkToJSON(requestParameters['issueLink']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueLinkFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksCreate2(requestParameters: WorkspacesProjectsIssuesLinksCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueLink> {
        const response = await this.workspacesProjectsIssuesLinksCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksDestroyRaw(requestParameters: WorkspacesProjectsIssuesLinksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksDestroy(requestParameters: WorkspacesProjectsIssuesLinksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesLinksDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksDestroy2Raw(requestParameters: WorkspacesProjectsIssuesLinksDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesLinksDestroy2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksDestroy2(requestParameters: WorkspacesProjectsIssuesLinksDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsIssuesLinksDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksPartialUpdateRaw(requestParameters: WorkspacesProjectsIssuesLinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueLink>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueLinkToJSON(requestParameters['patchedIssueLink']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueLinkFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksPartialUpdate(requestParameters: WorkspacesProjectsIssuesLinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueLink> {
        const response = await this.workspacesProjectsIssuesLinksPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksPartialUpdate2Raw(requestParameters: WorkspacesProjectsIssuesLinksPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueLink>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueLinkToJSON(requestParameters['patchedIssueLink']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueLinkFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksPartialUpdate2(requestParameters: WorkspacesProjectsIssuesLinksPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueLink> {
        const response = await this.workspacesProjectsIssuesLinksPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksRetrieveRaw(requestParameters: WorkspacesProjectsIssuesLinksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueLink>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueLinkFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksRetrieve(requestParameters: WorkspacesProjectsIssuesLinksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueLink> {
        const response = await this.workspacesProjectsIssuesLinksRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksRetrieve2Raw(requestParameters: WorkspacesProjectsIssuesLinksRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueLink>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve2().'
            );
        }

        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesLinksRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{issue_id}/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueLinkFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the links of the particular issue.
     */
    async workspacesProjectsIssuesLinksRetrieve2(requestParameters: WorkspacesProjectsIssuesLinksRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueLink> {
        const response = await this.workspacesProjectsIssuesLinksRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesPartialUpdateRaw(requestParameters: WorkspacesProjectsIssuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueToJSON(requestParameters['patchedIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesPartialUpdate(requestParameters: WorkspacesProjectsIssuesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesPartialUpdate2Raw(requestParameters: WorkspacesProjectsIssuesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIssueToJSON(requestParameters['patchedIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesPartialUpdate2(requestParameters: WorkspacesProjectsIssuesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesRetrieveRaw(requestParameters: WorkspacesProjectsIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesRetrieve(requestParameters: WorkspacesProjectsIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesRetrieve2Raw(requestParameters: WorkspacesProjectsIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesRetrieve2(requestParameters: WorkspacesProjectsIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesUpdateRaw(requestParameters: WorkspacesProjectsIssuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesUpdate().'
            );
        }

        if (requestParameters['issue'] == null) {
            throw new runtime.RequiredError(
                'issue',
                'Required parameter "issue" was null or undefined when calling workspacesProjectsIssuesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IssueToJSON(requestParameters['issue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesUpdate(requestParameters: WorkspacesProjectsIssuesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesUpdate2Raw(requestParameters: WorkspacesProjectsIssuesUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Issue>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsIssuesUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsIssuesUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsIssuesUpdate2().'
            );
        }

        if (requestParameters['issue'] == null) {
            throw new runtime.RequiredError(
                'issue',
                'Required parameter "issue" was null or undefined when calling workspacesProjectsIssuesUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/issues/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IssueToJSON(requestParameters['issue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to issue.
     */
    async workspacesProjectsIssuesUpdate2(requestParameters: WorkspacesProjectsIssuesUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Issue> {
        const response = await this.workspacesProjectsIssuesUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsCreateRaw(requestParameters: WorkspacesProjectsLabelsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsCreate().'
            );
        }

        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling workspacesProjectsLabelsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelToJSON(requestParameters['label']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsCreate(requestParameters: WorkspacesProjectsLabelsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.workspacesProjectsLabelsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsCreate2Raw(requestParameters: WorkspacesProjectsLabelsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsLabelsCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsCreate2().'
            );
        }

        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling workspacesProjectsLabelsCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelToJSON(requestParameters['label']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsCreate2(requestParameters: WorkspacesProjectsLabelsCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.workspacesProjectsLabelsCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsDestroyRaw(requestParameters: WorkspacesProjectsLabelsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsDestroy(requestParameters: WorkspacesProjectsLabelsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsLabelsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsDestroy2Raw(requestParameters: WorkspacesProjectsLabelsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsLabelsDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsDestroy2(requestParameters: WorkspacesProjectsLabelsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsLabelsDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsPartialUpdateRaw(requestParameters: WorkspacesProjectsLabelsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLabelToJSON(requestParameters['patchedLabel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsPartialUpdate(requestParameters: WorkspacesProjectsLabelsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.workspacesProjectsLabelsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsPartialUpdate2Raw(requestParameters: WorkspacesProjectsLabelsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsLabelsPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLabelToJSON(requestParameters['patchedLabel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsPartialUpdate2(requestParameters: WorkspacesProjectsLabelsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.workspacesProjectsLabelsPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsRetrieveRaw(requestParameters: WorkspacesProjectsLabelsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsRetrieve(requestParameters: WorkspacesProjectsLabelsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.workspacesProjectsLabelsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsRetrieve2Raw(requestParameters: WorkspacesProjectsLabelsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsLabelsRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsLabelsRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsLabelsRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/labels/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to the labels.
     */
    async workspacesProjectsLabelsRetrieve2(requestParameters: WorkspacesProjectsLabelsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.workspacesProjectsLabelsRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsMembersCreateRaw(requestParameters: WorkspacesProjectsMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsMembersCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsMembersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/members/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsMembersCreate(requestParameters: WorkspacesProjectsMembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsMembersCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsMembersRetrieveRaw(requestParameters: WorkspacesProjectsMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsMembersRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsMembersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/members/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsMembersRetrieve(requestParameters: WorkspacesProjectsMembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsMembersRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsModulesArchiveCreateRaw(requestParameters: WorkspacesProjectsModulesArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesArchiveCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesArchiveCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesArchiveCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/archive/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsModulesArchiveCreate(requestParameters: WorkspacesProjectsModulesArchiveCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesArchiveCreateRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsModulesArchiveDestroyRaw(requestParameters: WorkspacesProjectsModulesArchiveDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesArchiveDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesArchiveDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesArchiveDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/archive/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsModulesArchiveDestroy(requestParameters: WorkspacesProjectsModulesArchiveDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesArchiveDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsModulesArchiveRetrieveRaw(requestParameters: WorkspacesProjectsModulesArchiveRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesArchiveRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesArchiveRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesArchiveRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/archive/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsModulesArchiveRetrieve(requestParameters: WorkspacesProjectsModulesArchiveRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesArchiveRetrieveRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesCreateRaw(requestParameters: WorkspacesProjectsModulesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesCreate().'
            );
        }

        if (requestParameters['module'] == null) {
            throw new runtime.RequiredError(
                'module',
                'Required parameter "module" was null or undefined when calling workspacesProjectsModulesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModuleToJSON(requestParameters['module']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesCreate(requestParameters: WorkspacesProjectsModulesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.workspacesProjectsModulesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesCreate2Raw(requestParameters: WorkspacesProjectsModulesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesCreate2().'
            );
        }

        if (requestParameters['module'] == null) {
            throw new runtime.RequiredError(
                'module',
                'Required parameter "module" was null or undefined when calling workspacesProjectsModulesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModuleToJSON(requestParameters['module']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesCreate2(requestParameters: WorkspacesProjectsModulesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.workspacesProjectsModulesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesDestroyRaw(requestParameters: WorkspacesProjectsModulesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesDestroy(requestParameters: WorkspacesProjectsModulesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesDestroy2Raw(requestParameters: WorkspacesProjectsModulesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesDestroy2(requestParameters: WorkspacesProjectsModulesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesCreateRaw(requestParameters: WorkspacesProjectsModulesModuleIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModuleIssue>> {
        if (requestParameters['moduleId'] == null) {
            throw new runtime.RequiredError(
                'moduleId',
                'Required parameter "moduleId" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate().'
            );
        }

        if (requestParameters['moduleIssue'] == null) {
            throw new runtime.RequiredError(
                'moduleIssue',
                'Required parameter "moduleIssue" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{module_id}/module-issues/`.replace(`{${"module_id"}}`, encodeURIComponent(String(requestParameters['moduleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModuleIssueToJSON(requestParameters['moduleIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesCreate(requestParameters: WorkspacesProjectsModulesModuleIssuesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModuleIssue> {
        const response = await this.workspacesProjectsModulesModuleIssuesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesCreate2Raw(requestParameters: WorkspacesProjectsModulesModuleIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModuleIssue>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate2().'
            );
        }

        if (requestParameters['moduleId'] == null) {
            throw new runtime.RequiredError(
                'moduleId',
                'Required parameter "moduleId" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate2().'
            );
        }

        if (requestParameters['moduleIssue'] == null) {
            throw new runtime.RequiredError(
                'moduleIssue',
                'Required parameter "moduleIssue" was null or undefined when calling workspacesProjectsModulesModuleIssuesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{module_id}/module-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"module_id"}}`, encodeURIComponent(String(requestParameters['moduleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModuleIssueToJSON(requestParameters['moduleIssue']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesCreate2(requestParameters: WorkspacesProjectsModulesModuleIssuesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModuleIssue> {
        const response = await this.workspacesProjectsModulesModuleIssuesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesDestroyRaw(requestParameters: WorkspacesProjectsModulesModuleIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['moduleId'] == null) {
            throw new runtime.RequiredError(
                'moduleId',
                'Required parameter "moduleId" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{module_id}/module-issues/`.replace(`{${"module_id"}}`, encodeURIComponent(String(requestParameters['moduleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesDestroy(requestParameters: WorkspacesProjectsModulesModuleIssuesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesModuleIssuesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesDestroy2Raw(requestParameters: WorkspacesProjectsModulesModuleIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy2().'
            );
        }

        if (requestParameters['moduleId'] == null) {
            throw new runtime.RequiredError(
                'moduleId',
                'Required parameter "moduleId" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesModuleIssuesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{module_id}/module-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"module_id"}}`, encodeURIComponent(String(requestParameters['moduleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesDestroy2(requestParameters: WorkspacesProjectsModulesModuleIssuesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsModulesModuleIssuesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesRetrieveRaw(requestParameters: WorkspacesProjectsModulesModuleIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModuleIssue>> {
        if (requestParameters['moduleId'] == null) {
            throw new runtime.RequiredError(
                'moduleId',
                'Required parameter "moduleId" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{module_id}/module-issues/`.replace(`{${"module_id"}}`, encodeURIComponent(String(requestParameters['moduleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesRetrieve(requestParameters: WorkspacesProjectsModulesModuleIssuesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModuleIssue> {
        const response = await this.workspacesProjectsModulesModuleIssuesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesRetrieve2Raw(requestParameters: WorkspacesProjectsModulesModuleIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModuleIssue>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve2().'
            );
        }

        if (requestParameters['moduleId'] == null) {
            throw new runtime.RequiredError(
                'moduleId',
                'Required parameter "moduleId" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesModuleIssuesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{module_id}/module-issues/{issue_id}/`.replace(`{${"issue_id"}}`, encodeURIComponent(String(requestParameters['issueId']))).replace(`{${"module_id"}}`, encodeURIComponent(String(requestParameters['moduleId']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleIssueFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module issues.
     */
    async workspacesProjectsModulesModuleIssuesRetrieve2(requestParameters: WorkspacesProjectsModulesModuleIssuesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModuleIssue> {
        const response = await this.workspacesProjectsModulesModuleIssuesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesPartialUpdateRaw(requestParameters: WorkspacesProjectsModulesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedModuleToJSON(requestParameters['patchedModule']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesPartialUpdate(requestParameters: WorkspacesProjectsModulesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.workspacesProjectsModulesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesPartialUpdate2Raw(requestParameters: WorkspacesProjectsModulesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesPartialUpdate2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedModuleToJSON(requestParameters['patchedModule']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesPartialUpdate2(requestParameters: WorkspacesProjectsModulesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.workspacesProjectsModulesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesRetrieveRaw(requestParameters: WorkspacesProjectsModulesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesRetrieve(requestParameters: WorkspacesProjectsModulesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.workspacesProjectsModulesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesRetrieve2Raw(requestParameters: WorkspacesProjectsModulesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsModulesRetrieve2().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsModulesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsModulesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/modules/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions related to module.
     */
    async workspacesProjectsModulesRetrieve2(requestParameters: WorkspacesProjectsModulesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.workspacesProjectsModulesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsPartialUpdateRaw(requestParameters: WorkspacesProjectsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProjectToJSON(requestParameters['patchedProject']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsPartialUpdate(requestParameters: WorkspacesProjectsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.workspacesProjectsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsPartialUpdate2Raw(requestParameters: WorkspacesProjectsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProjectToJSON(requestParameters['patchedProject']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsPartialUpdate2(requestParameters: WorkspacesProjectsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.workspacesProjectsPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsRetrieveRaw(requestParameters: WorkspacesProjectsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsRetrieve(requestParameters: WorkspacesProjectsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.workspacesProjectsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsRetrieve2Raw(requestParameters: WorkspacesProjectsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workspacesProjectsRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Project Endpoints to create, update, list, retrieve and delete endpoint
     */
    async workspacesProjectsRetrieve2(requestParameters: WorkspacesProjectsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.workspacesProjectsRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesCreateRaw(requestParameters: WorkspacesProjectsStatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesCreate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesCreate().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling workspacesProjectsStatesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesCreate(requestParameters: WorkspacesProjectsStatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.workspacesProjectsStatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesCreate2Raw(requestParameters: WorkspacesProjectsStatesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesCreate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesCreate2().'
            );
        }

        if (requestParameters['stateId'] == null) {
            throw new runtime.RequiredError(
                'stateId',
                'Required parameter "stateId" was null or undefined when calling workspacesProjectsStatesCreate2().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling workspacesProjectsStatesCreate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/{state_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"state_id"}}`, encodeURIComponent(String(requestParameters['stateId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesCreate2(requestParameters: WorkspacesProjectsStatesCreate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.workspacesProjectsStatesCreate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesDestroyRaw(requestParameters: WorkspacesProjectsStatesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesDestroy().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesDestroy(requestParameters: WorkspacesProjectsStatesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsStatesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesDestroy2Raw(requestParameters: WorkspacesProjectsStatesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesDestroy2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesDestroy2().'
            );
        }

        if (requestParameters['stateId'] == null) {
            throw new runtime.RequiredError(
                'stateId',
                'Required parameter "stateId" was null or undefined when calling workspacesProjectsStatesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/{state_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"state_id"}}`, encodeURIComponent(String(requestParameters['stateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesDestroy2(requestParameters: WorkspacesProjectsStatesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workspacesProjectsStatesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesPartialUpdateRaw(requestParameters: WorkspacesProjectsStatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesPartialUpdate().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStateToJSON(requestParameters['patchedState']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesPartialUpdate(requestParameters: WorkspacesProjectsStatesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.workspacesProjectsStatesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesPartialUpdate2Raw(requestParameters: WorkspacesProjectsStatesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesPartialUpdate2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesPartialUpdate2().'
            );
        }

        if (requestParameters['stateId'] == null) {
            throw new runtime.RequiredError(
                'stateId',
                'Required parameter "stateId" was null or undefined when calling workspacesProjectsStatesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/{state_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"state_id"}}`, encodeURIComponent(String(requestParameters['stateId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStateToJSON(requestParameters['patchedState']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesPartialUpdate2(requestParameters: WorkspacesProjectsStatesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.workspacesProjectsStatesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesRetrieveRaw(requestParameters: WorkspacesProjectsStatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesRetrieve().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesRetrieve(requestParameters: WorkspacesProjectsStatesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.workspacesProjectsStatesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesRetrieve2Raw(requestParameters: WorkspacesProjectsStatesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling workspacesProjectsStatesRetrieve2().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling workspacesProjectsStatesRetrieve2().'
            );
        }

        if (requestParameters['stateId'] == null) {
            throw new runtime.RequiredError(
                'stateId',
                'Required parameter "stateId" was null or undefined when calling workspacesProjectsStatesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{slug}/projects/{project_id}/states/{state_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"state_id"}}`, encodeURIComponent(String(requestParameters['stateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * This enables timezone conversion according to the user set timezone
     */
    async workspacesProjectsStatesRetrieve2(requestParameters: WorkspacesProjectsStatesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.workspacesProjectsStatesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
